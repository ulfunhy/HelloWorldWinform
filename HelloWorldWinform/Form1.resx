<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        Av//QAL//yAE//8QCv//EAj//6gV///SS/8=
</value>
  </data>
</root>